-- Kauf Artikel:

START TRANSACTION;		-- ROLLBACK; immer zwischendrin als Option zum Abbrechen einbauen

-- Prüfe MitgliederID-- --Danach Speicherung der MitgliederID für den laufenden Prozess

SELECT Vorname, Nachname
	FROM Mitglieder
	WHERE MitgliederID = ?;	-- MitgliederID des Kunden


-- Erstellung der Bestellung

INSERT INTO Bestellung
	VALUES (
		NULL,			-- BestellID Auto_Increment
		00.00,			-- Gesamtpreis in Euro
		CURRENT_TIMESTAMP,	-- Timestamp
		?,			-- MitgliederID des Kunden
		3			-- Zahlungsart, noch nicht festgelegt
);			

-- Speicherung der BestellungID für den laufenden Bestellprozess

SELECT BestellungID
	FROM Bestellung AS b
	JOIN Mitglieder AS m
	ON m.MitgliederID = b.MitgliederID
	AND b.BestellungID = (SELECT BestellungID
				FROM Bestellung
				WHERE MitgliederID = ?  
				ORDER BY BestellungID DESC
				LIMIT 1);

-- Eingabe der Artikel, so oft wiederholen, bis alle Artikel eingegeben sind

INSERT INTO ArtikelBestellung (BestellungID, ArtikelID, Menge, Aufaddiert)
	VALUES (
		?,	--BestellungID--
		?,	--ArtikelID--
		?,	--Menge--
		? * (SELECT Einzelpreis FROM Artikel WHERE ArtikelID = ?)	-- Menge und ArtikelID
);

-- Berechnung Gesamtpreis, wenn alle Artikel eingegeben sind

UPDATE Bestellung AS b
	SET Gesamtpreis = (
			SELECT SUM(ab.Aufaddiert)
			FROM ArtikelBestellung AS ab
			WHERE ab.BestellungID = b.BestellungID
			)
			WHERE b.BestellungID = ?;	-- BestellID

-- Zeige alle Artikel sowie den Gesamtpreis an

SELECT a.Name, a.Einzelpreis, ab.Menge
	FROM Artikel AS a
	JOIN ArtikelBestellung AS ab
	ON ab.ArtikelID = a.ArtikelID
	JOIN Bestellung AS b
	ON b.BestellungID = ab.BestellungID
	WHERE b.BestellungID = ?;	-- BestellID

SELECT Gesamtpreis
	FROM Bestellung AS b
	WHERE BestellungID = ?;	-- BestellID

-- Gib Zahlungsart ein

UPDATE Bestellung
	SET ZahlungID = ?		-- ZahlungID
	WHERE BestellungID = ?;		-- BestellID

-- Update Timestamp

UPDATE Bestellung
	SET Bestelldatum = CURRENT_TIMESTAMP
	WHERE BestellungID = ?;		-- BestellID

-- Schließe die Bestellung erfolgreich ab

COMMIT;